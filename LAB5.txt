-- Zadanie 1 - Blok anonimowy ze zmienną numer_max

DECLARE
  numer_max departments.department_id%TYPE;
  nazwa_dept departments.department_name%TYPE := 'EDUCATION';
BEGIN
  SELECT MAX(department_id) INTO numer_max FROM departments;
  
  INSERT INTO departments (department_id, department_name)
  VALUES (numer_max + 10, nazwa_dept);
  
  COMMIT;
  
  DBMS_OUTPUT.PUT_LINE('Dodano departament o ID: ' || (numer_max + 10));
END;
/

-- Zadanie 2 - Dodanie instrukcji zmieniającej location_id

DECLARE
  numer_max departments.department_id%TYPE;
  nazwa_dept departments.department_name%TYPE := 'EDUCATION';
BEGIN
  SELECT MAX(department_id) INTO numer_max FROM departments;
  
  INSERT INTO departments (department_id, department_name)
  VALUES (numer_max + 10, nazwa_dept);
  
  UPDATE departments
  SET location_id = 3000
  WHERE department_id = numer_max + 10;
  
  COMMIT;
  
  DBMS_OUTPUT.PUT_LINE('Dodano departament o ID: ' || (numer_max + 10) || ' i ustawiono location_id = 3000');
END;
/

-- Zadanie 3 - Tabela nowa

CREATE TABLE nowa (
  val VARCHAR2(10)
);

DECLARE
BEGIN
  FOR i IN 1..10 LOOP
    IF i NOT IN (4,6) THEN
      INSERT INTO nowa (val) VALUES (TO_CHAR(i));
    END IF;
  END LOOP;
  
  COMMIT;
END;
/

-- Zadanie 4 - Wyciąganie info countries do %ROWTYPE

DECLARE
  v_country countries%ROWTYPE;
BEGIN
  SELECT * INTO v_country FROM countries WHERE country_id = 'CA';

  DBMS_OUTPUT.PUT_LINE('Country Name: ' || v_country.country_name);
  DBMS_OUTPUT.PUT_LINE('Region ID: ' || v_country.region_id);
END;
/

-- Zadanie 5 - Deklaracja kursora

DECLARE
  CURSOR c_salary IS
    SELECT salary, last_name FROM employees WHERE department_id = 50;

  v_salary employees.salary%TYPE;
  v_last_name employees.last_name%TYPE;
BEGIN
  OPEN c_salary;
  LOOP
    FETCH c_salary INTO v_salary, v_last_name;
    EXIT WHEN c_salary%NOTFOUND;
    
    IF v_salary > 3100 THEN
      DBMS_OUTPUT.PUT_LINE(v_last_name || ' - nie dawać podwyżki');
    ELSE
      DBMS_OUTPUT.PUT_LINE(v_last_name || ' - dać podwyżkę');
    END IF;
  END LOOP;
  CLOSE c_salary;
END;
/

-- Zadanie 6 - Kursor z nowymi parametrami

DECLARE
  CURSOR c_employees (p_min_salary NUMBER, p_max_salary NUMBER, p_name_part VARCHAR2) IS
    SELECT salary, first_name, last_name 
    FROM employees
    WHERE salary BETWEEN p_min_salary AND p_max_salary
      AND LOWER(first_name) LIKE '%' || LOWER(p_name_part) || '%';

  v_salary employees.salary%TYPE;
  v_first_name employees.first_name%TYPE;
  v_last_name employees.last_name%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Pracownicy z zarobkami 1000-5000 i litera "a" w imieniu:');
  OPEN c_employees(1000, 5000, 'a');
  LOOP
    FETCH c_employees INTO v_salary, v_first_name, v_last_name;
    EXIT WHEN c_employees%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_first_name || ' ' || v_last_name || ' - ' || v_salary);
  END LOOP;
  CLOSE c_employees;

  DBMS_OUTPUT.PUT_LINE('Pracownicy z zarobkami 5000-20000 i litera "u" w imieniu:');
  OPEN c_employees(5000, 20000, 'u');
  LOOP
    FETCH c_employees INTO v_salary, v_first_name, v_last_name;
    EXIT WHEN c_employees%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_first_name || ' ' || v_last_name || ' - ' || v_salary);
  END LOOP;
  CLOSE c_employees;
END;
/

-- Zadanie 9

CREATE OR REPLACE PROCEDURE add_job(
  p_job_id IN jobs.job_id%TYPE,
  p_job_title IN jobs.job_title%TYPE
) AS
BEGIN
  INSERT INTO jobs (job_id, job_title)
  VALUES (p_job_id, p_job_title);

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Dodano nową pozycję job_id=' || p_job_id);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd podczas dodawania job: ' || SQLERRM);
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE update_job_title(
  p_job_id IN jobs.job_id%TYPE,
  p_new_title IN jobs.job_title%TYPE
) AS
  rows_updated NUMBER;
  e_no_rows_updated EXCEPTION;
BEGIN
  UPDATE jobs
  SET job_title = p_new_title
  WHERE job_id = p_job_id;

  rows_updated := SQL%ROWCOUNT;

  IF rows_updated = 0 THEN
    RAISE e_no_rows_updated;
  END IF;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Zaktualizowano job_id=' || p_job_id);

EXCEPTION
  WHEN e_no_rows_updated THEN
    DBMS_OUTPUT.PUT_LINE('Brak wierszy do aktualizacji dla job_id=' || p_job_id);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd podczas aktualizacji job: ' || SQLERRM);
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE delete_job(
  p_job_id IN jobs.job_id%TYPE
) AS
  rows_deleted NUMBER;
  e_no_rows_deleted EXCEPTION;
BEGIN
  DELETE FROM jobs WHERE job_id = p_job_id;

  rows_deleted := SQL%ROWCOUNT;

  IF rows_deleted = 0 THEN
    RAISE e_no_rows_deleted;
  END IF;

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Usunięto job_id=' || p_job_id);

EXCEPTION
  WHEN e_no_rows_deleted THEN
    DBMS_OUTPUT.PUT_LINE('Brak wierszy do usunięcia dla job_id=' || p_job_id);
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd podczas usuwania job: ' || SQLERRM);
    ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE get_employee_salary_name(
  p_employee_id IN employees.employee_id%TYPE,
  p_salary OUT employees.salary%TYPE,
  p_last_name OUT employees.last_name%TYPE
) AS
BEGIN
  SELECT salary, last_name
  INTO p_salary, p_last_name
  FROM employees
  WHERE employee_id = p_employee_id;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nie znaleziono pracownika o ID=' || p_employee_id);
    p_salary := NULL;
    p_last_name := NULL;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd: ' || SQLERRM);
    p_salary := NULL;
    p_last_name := NULL;
END;
/

CREATE SEQUENCE employees_seq
  START WITH 1000
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

CREATE OR REPLACE PROCEDURE add_employee(
  p_first_name IN employees.first_name%TYPE DEFAULT 'Unknown',
  p_last_name IN employees.last_name%TYPE DEFAULT 'Unknown',
  p_email IN employees.email%TYPE DEFAULT NULL,
  p_phone_number IN employees.phone_number%TYPE DEFAULT NULL,
  p_hire_date IN employees.hire_date%TYPE DEFAULT SYSDATE,
  p_job_id IN employees.job_id%TYPE DEFAULT 'IT_PROG',
  p_salary IN employees.salary%TYPE DEFAULT 1000,
  p_commission_pct IN employees.commission_pct%TYPE DEFAULT NULL,
  p_manager_id IN employees.manager_id%TYPE DEFAULT NULL,
  p_department_id IN employees.department_id%TYPE DEFAULT NULL
) AS
  v_employee_id employees.employee_id%TYPE;
  e_salary_too_high EXCEPTION;
BEGIN
  IF p_salary > 20000 THEN
    RAISE e_salary_too_high;
  END IF;

  SELECT employees_seq.NEXTVAL INTO v_employee_id FROM dual;

  INSERT INTO employees(employee_id, first_name, last_name, email, phone_number,
                        hire_date, job_id, salary, commission_pct, manager_id, department_id)
  VALUES(v_employee_id, p_first_name, p_last_name, p_email, p_phone_number,
         p_hire_date, p_job_id, p_salary, p_commission_pct, p_manager_id, p_department_id);

  COMMIT;
  DBMS_OUTPUT.PUT_LINE('Dodano pracownika ID=' || v_employee_id);

EXCEPTION
  WHEN e_salary_too_high THEN
    DBMS_OUTPUT.PUT_LINE('Błąd: Wynagrodzenie nie może przekraczać 20000');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Błąd podczas dodawania pracownika: ' || SQLERRM);
    ROLLBACK;
END;
/

-- Testy:

BEGIN
  add_job('J9999', 'Test Job');
END;
/

BEGIN
  update_job_title('J9999', 'Updated Test Job');
  update_job_title('NONEXISTENT', 'Should Fail');
END;
/

BEGIN
  delete_job('J9999');
  delete_job('NONEXISTENT');
END;
/

DECLARE
  v_salary employees.salary%TYPE;
  v_last_name employees.last_name%TYPE;
BEGIN
  get_employee_salary_name(100, v_salary, v_last_name);
  DBMS_OUTPUT.PUT_LINE('Pracownik: ' || v_last_name || ', Salary: ' || v_salary);
END;
/

BEGIN
  add_employee(p_first_name => 'Jan', p_last_name => 'Kowalski', p_salary => 15000);
  add_employee(p_first_name => 'Anna', p_last_name => 'Nowak', p_salary => 25000); -- powinno rzucić wyjątek
END;
/
