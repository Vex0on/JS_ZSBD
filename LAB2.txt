-- Zadanie I - Usunąłem wzystkie tabele

DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS;
DROP TABLE JOBS CASCADE CONSTRAINTS;
DROP TABLE JOB_HISTORY CASCADE CONSTRAINTS;
DROP TABLE LOCATIONS CASCADE CONSTRAINTS;
DROP TABLE COUNTRIES CASCADE CONSTRAINTS;
DROP TABLE REGIONS CASCADE CONSTRAINTS;

-- Zadanie II - Skopiowałem tabele od HR

CREATE TABLE EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;
CREATE TABLE DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;
CREATE TABLE JOBS AS SELECT * FROM HR.JOBS;
CREATE TABLE JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;
CREATE TABLE LOCATIONS AS SELECT * FROM HR.LOCATIONS;
CREATE TABLE COUNTRIES AS SELECT * FROM HR.COUNTRIES;
CREATE TABLE REGIONS AS SELECT * FROM HR.REGIONS;

-- Zadanie III

ALTER TABLE EMPLOYEES ADD CONSTRAINT pk_employees PRIMARY KEY (employee_id);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT pk_departments PRIMARY KEY (department_id);
ALTER TABLE JOBS ADD CONSTRAINT pk_jobs PRIMARY KEY (job_id);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT pk_job_history PRIMARY KEY (employee_id, start_date);
ALTER TABLE LOCATIONS ADD CONSTRAINT pk_locations PRIMARY KEY (location_id);
ALTER TABLE COUNTRIES ADD CONSTRAINT pk_countries PRIMARY KEY (country_id);
ALTER TABLE REGIONS ADD CONSTRAINT pk_regions PRIMARY KEY (region_id);

ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_emp_dept FOREIGN KEY (department_id) REFERENCES DEPARTMENTS(department_id);
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_emp_job FOREIGN KEY (job_id) REFERENCES JOBS(job_id);
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_emp_mgr FOREIGN KEY (manager_id) REFERENCES EMPLOYEES(employee_id);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_dept_loc FOREIGN KEY (location_id) REFERENCES LOCATIONS(location_id);
ALTER TABLE LOCATIONS ADD CONSTRAINT fk_loc_country FOREIGN KEY (country_id) REFERENCES COUNTRIES(country_id);
ALTER TABLE COUNTRIES ADD CONSTRAINT fk_country_region FOREIGN KEY (region_id) REFERENCES REGIONS(region_id);

-- Zadanie 1 - Widok wynagrodzeń

CREATE VIEW emp_wynagrodzenie AS
SELECT last_name || ' - ' || salary AS wynagrodzenie
FROM EMPLOYEES
WHERE department_id IN (20, 50) AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;

-- Zadanie 2 - Widok danych 2005

CREATE VIEW emp_2005 AS
SELECT hire_date, last_name, job_id
FROM EMPLOYEES
WHERE manager_id IS NOT NULL 
AND EXTRACT(YEAR FROM hire_date) = 2005
ORDER BY job_id;

-- Zadanie 3 - Widok danych osobowych i zarobków

CREATE VIEW emp_names AS
SELECT first_name || ' ' || last_name AS full_name, salary, phone_number
FROM EMPLOYEES
WHERE SUBSTR(last_name, 3, 1) = 'e' AND first_name LIKE '%' || employee_id || '%'
ORDER BY full_name DESC, salary ASC;

-- Zadanie 4 - Widok dodatków

CREATE VIEW emp_bonus AS
SELECT first_name, last_name, 
       ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS months_worked,
       CASE 
           WHEN MONTHS_BETWEEN(SYSDATE, hire_date) < 150 THEN salary * 0.1
           WHEN MONTHS_BETWEEN(SYSDATE, hire_date) BETWEEN 150 AND 200 THEN salary * 0.2
           ELSE salary * 0.3
       END AS wysokosc_dodatku
FROM EMPLOYEES
ORDER BY months_worked;

-- Zadanie 5 - Płaca wyższa niż 5k

CREATE VIEW dept_salaries AS
SELECT d.department_id,
       ROUND(SUM(e.salary)) AS suma_zarobkow,
       ROUND(AVG(e.salary)) AS srednia_zarobkow
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.department_id = d.department_id
JOIN JOBS j ON e.job_id = j.job_id
WHERE j.min_salary > 5000
GROUP BY d.department_id;

-- Zadanie 6 - Osoby pracujące z Toronoto

CREATE VIEW emp_toronto AS
SELECT e.last_name, e.department_id, d.department_name, e.job_id
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.department_id = d.department_id
JOIN LOCATIONS l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';

-- Zadanie 7 - Osoby o imieniu Jennifer i ich współpracownicy

CREATE VIEW jennifer_colleagues AS
SELECT e1.first_name || ' ' || e1.last_name AS jennifer_name,
       e2.first_name || ' ' || e2.last_name AS coworker_name
FROM EMPLOYEES e1
JOIN EMPLOYEES e2 ON e1.department_id = e2.department_id
WHERE e1.first_name = 'Jennifer' AND e1.employee_id != e2.employee_id;

-- Zadanie 8 - Departamenty bez pracowników

CREATE VIEW empty_departments AS
SELECT d.department_id, d.department_name
FROM DEPARTMENTS d
LEFT JOIN EMPLOYEES e ON d.department_id = e.department_id
WHERE e.employee_id IS NULL;

-- Zadanie 9 - Dane pracownicze

CREATE VIEW emp_grades AS
SELECT e.first_name, e.last_name, e.job_id, d.department_name, e.salary,
       CASE 
           WHEN salary < 3000 THEN 'D'
           WHEN salary BETWEEN 3000 AND 5000 THEN 'C'
           WHEN salary BETWEEN 5001 AND 8000 THEN 'B'
           ELSE 'A'
       END AS grade
FROM EMPLOYEES e
JOIN DEPARTMENTS d ON e.department_id = d.department_id;

-- Zadanie 10 - Osoby zarabiające

CREATE VIEW emp_above_avg AS
SELECT first_name, last_name, salary
FROM EMPLOYEES
WHERE salary > (SELECT AVG(salary) FROM EMPLOYEES)
ORDER BY salary DESC;

-- Zadanie 11 - Osoby pracujące z osobami mającymi literę "U" w nazwisku

CREATE VIEW emp_with_u_colleagues AS
SELECT DISTINCT e.employee_id, e.first_name, e.last_name
FROM EMPLOYEES e
WHERE e.department_id IN (
    SELECT DISTINCT department_id
    FROM EMPLOYEES
    WHERE LOWER(last_name) LIKE '%u%'
);

-- Zadanie 12 - Pracownicy pracujący dłużej niż średnia

CREATE VIEW emp_above_avg_tenure AS
SELECT employee_id, first_name, last_name, hire_date,
       MONTHS_BETWEEN(SYSDATE, hire_date) AS months_worked
FROM EMPLOYEES
WHERE MONTHS_BETWEEN(SYSDATE, hire_date) > (
    SELECT AVG(MONTHS_BETWEEN(SYSDATE, hire_date)) FROM EMPLOYEES
);


-- Zadanie 13 - Departamenty i informacje o nich

CREATE VIEW dept_summary AS
SELECT d.department_name,
       COUNT(e.employee_id) AS liczba_pracownikow,
       ROUND(AVG(e.salary)) AS srednie_wynagrodzenie
FROM DEPARTMENTS d
LEFT JOIN EMPLOYEES e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY liczba_pracownikow DESC;

-- Zadanie 14 - Pracownicy zarabiający mniej niż ktokolwiek w "IT"

CREATE VIEW emp_below_it AS
SELECT first_name, last_name, salary
FROM EMPLOYEES
WHERE salary < (
    SELECT MIN(e2.salary)
    FROM EMPLOYEES e2
    JOIN DEPARTMENTS d ON e2.department_id = d.department_id
    WHERE d.department_name = 'IT'
);

-- Zadanie 15 - Departamenty, w których przynajmniej jeden pracownik zarabia więcej niż średnia

CREATE VIEW dept_with_high_earner AS
SELECT DISTINCT d.department_id, d.department_name
FROM DEPARTMENTS d
JOIN EMPLOYEES e ON d.department_id = e.department_id
WHERE e.salary > (SELECT AVG(salary) FROM EMPLOYEES);

-- Zadanie 16 - TOP5 najlepiej opłacanych stanowisk

CREATE VIEW top5_jobs AS
SELECT job_id, ROUND(AVG(salary)) AS avg_salary
FROM EMPLOYEES
GROUP BY job_id
ORDER BY avg_salary DESC
FETCH FIRST 5 ROWS ONLY;

-- Zadanie 17 - Informacje o regionach

CREATE VIEW region_summary AS
SELECT r.region_name,
       COUNT(DISTINCT c.country_id) AS liczba_krajow,
       COUNT(e.employee_id) AS liczba_pracownikow
FROM REGIONS r
JOIN COUNTRIES c ON r.region_id = c.region_id
JOIN LOCATIONS l ON c.country_id = l.country_id
JOIN DEPARTMENTS d ON l.location_id = d.location_id
JOIN EMPLOYEES e ON d.department_id = e.department_id
GROUP BY r.region_name;

-- Zadanie 18 - Pracownicy zarabiający więcej niż ich menedżerowie

CREATE VIEW emp_earn_more_than_mgr AS
SELECT e.first_name, e.last_name, e.salary,
       m.first_name AS mgr_first, m.last_name AS mgr_last, m.salary AS mgr_salary
FROM EMPLOYEES e
JOIN EMPLOYEES m ON e.manager_id = m.employee_id
WHERE e.salary > m.salary;

-- Zadanie 19 - Ilość pracowników zaczynających pracę per miesiąc

CREATE VIEW hires_by_month AS
SELECT TO_CHAR(hire_date, 'MM') AS miesiac_nr,
       TO_CHAR(hire_date, 'Month') AS miesiac,
       COUNT(*) AS liczba_przyjec
FROM EMPLOYEES
GROUP BY TO_CHAR(hire_date, 'MM'), TO_CHAR(hire_date, 'Month')
ORDER BY miesiac_nr;

-- Zadanie 20 - Trzy departamenty z najwyższą średnią pensją

CREATE VIEW top3_depts AS
SELECT d.department_name, ROUND(AVG(e.salary)) AS srednia_pensja
FROM DEPARTMENTS d
JOIN EMPLOYEES e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY srednia_pensja DESC
FETCH FIRST 3 ROWS ONLY;
