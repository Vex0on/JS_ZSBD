
CREATE TABLE Klienci (
    id_klienta NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    imie VARCHAR2(50),
    nazwisko VARCHAR2(50),
    email VARCHAR2(100),
    telefon VARCHAR2(15),
    pesel VARCHAR2(11) UNIQUE
);

CREATE TABLE Nieruchomosci (
    id_nieruchomosci NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    adres VARCHAR2(200),
    miasto VARCHAR2(50),
    powierzchnia NUMBER(5,2),
    cena NUMBER(12,2),
    typ VARCHAR2(30)
);

CREATE TABLE Transakcje (
    id_transakcji NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_klienta NUMBER REFERENCES Klienci(id_klienta),
    id_nieruchomosci NUMBER REFERENCES Nieruchomosci(id_nieruchomosci),
    data_sprzedazy DATE,
    cena_sprzedazy NUMBER(12,2)
);

CREATE TABLE Archiwum_klienci AS SELECT * FROM Klienci WHERE 1=0;
CREATE TABLE Archiwum_nieruchomosci AS SELECT * FROM Nieruchomosci WHERE 1=0;


CREATE TABLE Logi_operacji (
    id_logu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    data_operacji DATE,
    opis VARCHAR2(400)
);


CREATE OR REPLACE PROCEDURE dodaj_klienta (
    p_imie IN VARCHAR2,
    p_nazwisko IN VARCHAR2,
    p_email IN VARCHAR2,
    p_telefon IN VARCHAR2,
    p_pesel IN VARCHAR2
) AS
    e_pesel_niepoprawny EXCEPTION;
    v_opis VARCHAR2(400);
BEGIN
    IF LENGTH(p_pesel) != 11 THEN
        RAISE e_pesel_niepoprawny;
    END IF;

    INSERT INTO Klienci (imie, nazwisko, email, telefon, pesel)
    VALUES (p_imie, p_nazwisko, p_email, p_telefon, p_pesel);

    v_opis := 'Dodano klienta: ' || p_pesel;
    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, v_opis);

EXCEPTION
    WHEN e_pesel_niepoprawny THEN
        RAISE_APPLICATION_ERROR(-20001, 'PESEL musi mieć 11 znaków');
    WHEN OTHERS THEN
        v_opis := 'Błąd w procedurze dodaj_klienta: ' || SQLERRM;
        INSERT INTO Logi_operacji (data_operacji, opis)
        VALUES (SYSDATE, v_opis);
        RAISE;
END;
/




CREATE OR REPLACE TRIGGER archiwizuj_klienta
BEFORE DELETE ON Klienci
FOR EACH ROW
BEGIN
    INSERT INTO Archiwum_klienci (
        id_klienta,
        imie,
        nazwisko,
        email,
        telefon,
        pesel
    ) VALUES (
        :OLD.id_klienta,
        :OLD.imie,
        :OLD.nazwisko,
        :OLD.email,
        :OLD.telefon,
        :OLD.pesel
    );

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Zarchiwizowano klienta: ' || :OLD.pesel);
END;
/

-- Miesięczne podsumowanie sprzedaży
CREATE OR REPLACE PROCEDURE podsumowanie_miesieczne (
    p_rok IN NUMBER,
    p_miesiac IN NUMBER
) AS
    v_suma NUMBER;
BEGIN
    SELECT SUM(cena_sprzedazy) INTO v_suma
    FROM Transakcje
    WHERE EXTRACT(YEAR FROM data_sprzedazy) = p_rok
      AND EXTRACT(MONTH FROM data_sprzedazy) = p_miesiac;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Miesięczne podsumowanie sprzedaży: ' || v_suma || ' PLN');

    DBMS_OUTPUT.PUT_LINE('Suma sprzedaży: ' || v_suma);
END;
/

CREATE OR REPLACE FUNCTION sprawdz_pesel(p_pesel VARCHAR2)
RETURN BOOLEAN
IS
BEGIN
    IF LENGTH(p_pesel) != 11 OR NOT REGEXP_LIKE(p_pesel, '^\d{11}$') THEN
        RETURN FALSE;
    END IF;
    RETURN TRUE;
END;
/

CREATE OR REPLACE PROCEDURE aktualizuj_klienta (
    p_id IN NUMBER,
    p_email IN VARCHAR2 DEFAULT NULL,
    p_telefon IN VARCHAR2 DEFAULT NULL
) AS
    v_opis VARCHAR2(400);
BEGIN
    UPDATE Klienci
    SET email = NVL(p_email, email),
        telefon = NVL(p_telefon, telefon)
    WHERE id_klienta = p_id;

    v_opis := 'Zaktualizowano klienta ID: ' || TO_CHAR(p_id);
    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, v_opis);

EXCEPTION
    WHEN OTHERS THEN
        v_opis := 'Błąd w procedurze aktualizuj_klienta: ' || SQLERRM;
        INSERT INTO Logi_operacji (data_operacji, opis)
        VALUES (SYSDATE, v_opis);
        RAISE;
END;
/



CREATE OR REPLACE PROCEDURE usun_klienta (
    p_id IN NUMBER
) AS
    v_opis VARCHAR2(400);
BEGIN
    DELETE FROM Klienci WHERE id_klienta = p_id;

EXCEPTION
    WHEN OTHERS THEN
        v_opis := 'Błąd w procedurze usun_klienta: ' || SQLERRM;
        INSERT INTO Logi_operacji (data_operacji, opis)
        VALUES (SYSDATE, v_opis);
        RAISE;
END;
/



CREATE OR REPLACE VIEW ranking_klientow AS
SELECT
    k.id_klienta,
    k.imie,
    k.nazwisko,
    SUM(t.cena_sprzedazy) AS laczna_kwota,
    RANK() OVER (ORDER BY SUM(t.cena_sprzedazy) DESC) AS pozycja
FROM
    Klienci k
    JOIN Transakcje t ON k.id_klienta = t.id_klienta
GROUP BY
    k.id_klienta, k.imie, k.nazwisko;

CREATE OR REPLACE PROCEDURE podsumowanie_kwartalne (
    p_rok IN NUMBER,
    p_kwartal IN NUMBER
) AS
    v_suma NUMBER;
BEGIN
    SELECT SUM(cena_sprzedazy) INTO v_suma
    FROM Transakcje
    WHERE EXTRACT(YEAR FROM data_sprzedazy) = p_rok
      AND TO_CHAR(data_sprzedazy, 'Q') = TO_CHAR(p_kwartal);

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Kwartalne podsumowanie Q' || p_kwartal || '/' || p_rok || ': ' || v_suma || ' PLN');

    DBMS_OUTPUT.PUT_LINE('Suma kwartalna: ' || v_suma);
END;
/


CREATE OR REPLACE PROCEDURE podsumowanie_roczne(p_rok IN NUMBER) AS
    v_suma NUMBER;
BEGIN
    SELECT SUM(cena_sprzedazy) INTO v_suma
    FROM Transakcje
    WHERE EXTRACT(YEAR FROM data_sprzedazy) = p_rok;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Roczne podsumowanie ' || p_rok || ': ' || v_suma || ' PLN');
END;
/


CREATE OR REPLACE PROCEDURE dodaj_nieruchomosc (
    p_adres IN VARCHAR2,
    p_miasto IN VARCHAR2,
    p_powierzchnia IN NUMBER,
    p_cena IN NUMBER,
    p_typ IN VARCHAR2
) AS
BEGIN
    INSERT INTO Nieruchomosci (adres, miasto, powierzchnia, cena, typ)
    VALUES (p_adres, p_miasto, p_powierzchnia, p_cena, p_typ);

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Dodano nieruchomość: ' || p_adres);
END;
/

CREATE OR REPLACE PROCEDURE aktualizuj_nieruchomosc (
    p_id IN NUMBER,
    p_adres IN VARCHAR2 DEFAULT NULL,
    p_miasto IN VARCHAR2 DEFAULT NULL,
    p_powierzchnia IN NUMBER DEFAULT NULL,
    p_cena IN NUMBER DEFAULT NULL,
    p_typ IN VARCHAR2 DEFAULT NULL
) AS
BEGIN
    UPDATE Nieruchomosci
    SET
        adres = NVL(p_adres, adres),
        miasto = NVL(p_miasto, miasto),
        powierzchnia = NVL(p_powierzchnia, powierzchnia),
        cena = NVL(p_cena, cena),
        typ = NVL(p_typ, typ)
    WHERE id_nieruchomosci = p_id;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Zaktualizowano nieruchomość ID: ' || p_id);
END;
/

CREATE OR REPLACE PROCEDURE usun_nieruchomosc (
    p_id IN NUMBER
) AS
BEGIN
    DELETE FROM Nieruchomosci WHERE id_nieruchomosci = p_id;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Usunięto nieruchomość ID: ' || p_id);
END;
/

CREATE OR REPLACE PROCEDURE dodaj_transakcje (
    p_id_klienta IN NUMBER,
    p_id_nieruchomosci IN NUMBER,
    p_data_sprzedazy IN DATE,
    p_cena_sprzedazy IN NUMBER
) AS
BEGIN
    INSERT INTO Transakcje (id_klienta, id_nieruchomosci, data_sprzedazy, cena_sprzedazy)
    VALUES (p_id_klienta, p_id_nieruchomosci, p_data_sprzedazy, p_cena_sprzedazy);

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Dodano transakcję klient ID: ' || p_id_klienta || ', nieruchomość ID: ' || p_id_nieruchomosci);
END;
/

CREATE OR REPLACE PROCEDURE aktualizuj_transakcje (
    p_id IN NUMBER,
    p_id_klienta IN NUMBER DEFAULT NULL,
    p_id_nieruchomosci IN NUMBER DEFAULT NULL,
    p_data_sprzedazy IN DATE DEFAULT NULL,
    p_cena_sprzedazy IN NUMBER DEFAULT NULL
) AS
BEGIN
    UPDATE Transakcje
    SET
        id_klienta = NVL(p_id_klienta, id_klienta),
        id_nieruchomosci = NVL(p_id_nieruchomosci, id_nieruchomosci),
        data_sprzedazy = NVL(p_data_sprzedazy, data_sprzedazy),
        cena_sprzedazy = NVL(p_cena_sprzedazy, cena_sprzedazy)
    WHERE id_transakcji = p_id;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Zaktualizowano transakcję ID: ' || p_id);
END;
/

CREATE OR REPLACE PROCEDURE usun_transakcje (
    p_id IN NUMBER
) AS
BEGIN
    DELETE FROM Transakcje WHERE id_transakcji = p_id;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Usunięto transakcję ID: ' || p_id);
END;
/

CREATE OR REPLACE TRIGGER archiwizuj_nieruchomosc
BEFORE DELETE ON Nieruchomosci
FOR EACH ROW
BEGIN
    INSERT INTO Archiwum_nieruchomosci (
        id_nieruchomosci,
        adres,
        miasto,
        powierzchnia,
        cena,
        typ
    ) VALUES (
        :OLD.id_nieruchomosci,
        :OLD.adres,
        :OLD.miasto,
        :OLD.powierzchnia,
        :OLD.cena,
        :OLD.typ
    );

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Zarchiwizowano nieruchomość ID: ' || :OLD.id_nieruchomosci);
END;
/


CREATE OR REPLACE TRIGGER archiwizuj_transakcje
BEFORE DELETE ON Transakcje
FOR EACH ROW
BEGIN
    INSERT INTO Archiwum_transakcje (
        id_transakcji,
        id_klienta,
        id_nieruchomosci,
        data_sprzedazy,
        cena_sprzedazy
    ) VALUES (
        :OLD.id_transakcji,
        :OLD.id_klienta,
        :OLD.id_nieruchomosci,
        :OLD.data_sprzedazy,
        :OLD.cena_sprzedazy
    );

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, 'Zarchiwizowano transakcję ID: ' || :OLD.id_transakcji);
END;
/

CREATE OR REPLACE VIEW sprzedaz_miesieczna AS
SELECT
    EXTRACT(YEAR FROM data_sprzedazy) AS rok,
    EXTRACT(MONTH FROM data_sprzedazy) AS miesiac,
    COUNT(*) AS liczba_transakcji,
    SUM(cena_sprzedazy) AS laczna_kwota
FROM Transakcje
GROUP BY EXTRACT(YEAR FROM data_sprzedazy), EXTRACT(MONTH FROM data_sprzedazy)
ORDER BY rok, miesiac;

CREATE OR REPLACE VIEW ranking_nieruchomosci AS
SELECT
    n.id_nieruchomosci,
    n.adres,
    COUNT(t.id_transakcji) AS liczba_sprzedazy,
    SUM(t.cena_sprzedazy) AS laczna_suma
FROM
    Nieruchomosci n
    LEFT JOIN Transakcje t ON n.id_nieruchomosci = t.id_nieruchomosci
GROUP BY
    n.id_nieruchomosci, n.adres
ORDER BY liczba_sprzedazy DESC;







CREATE OR REPLACE VIEW historia_transakcji AS
SELECT
    t.id_transakcji,
    t.data_sprzedazy,
    t.cena_sprzedazy,
    k.imie || ' ' || k.nazwisko AS klient,
    n.adres AS nieruchomosc
FROM Transakcje t
JOIN Klienci k ON t.id_klienta = k.id_klienta
JOIN Nieruchomosci n ON t.id_nieruchomosci = n.id_nieruchomosci
ORDER BY t.data_sprzedazy DESC;

CREATE OR REPLACE VIEW statystyki_klientow AS
SELECT
    k.id_klienta,
    k.imie,
    k.nazwisko,
    COUNT(t.id_transakcji) AS liczba_transakcji,
    SUM(t.cena_sprzedazy) AS suma_transakcji
FROM Klienci k
LEFT JOIN Transakcje t ON k.id_klienta = t.id_klienta
GROUP BY k.id_klienta, k.imie, k.nazwisko
ORDER BY suma_transakcji DESC;


CREATE OR REPLACE VIEW statystyki_klientow AS
SELECT
    k.id_klienta,
    k.imie,
    k.nazwisko,
    COUNT(t.id_transakcji) AS liczba_transakcji,
    SUM(t.cena_sprzedazy) AS suma_transakcji
FROM Klienci k
INNER JOIN Transakcje t ON k.id_klienta = t.id_klienta
GROUP BY k.id_klienta, k.imie, k.nazwisko
ORDER BY suma_transakcji DESC;


CREATE OR REPLACE VIEW ostatnie_operacje AS
SELECT *
FROM Logi_operacji
ORDER BY data_operacji DESC
FETCH FIRST 50 ROWS ONLY;




CREATE OR REPLACE VIEW sprzedaz_wg_typu_nieruchomosci AS
SELECT
    n.typ,
    COUNT(t.id_transakcji) AS liczba_transakcji,
    SUM(t.cena_sprzedazy) AS suma_sprzedazy
FROM Transakcje t
JOIN Nieruchomosci n ON t.id_nieruchomosci = n.id_nieruchomosci
GROUP BY n.typ
ORDER BY suma_sprzedazy DESC;

CREATE OR REPLACE VIEW transakcje_miesieczne AS
SELECT
    TO_CHAR(data_sprzedazy, 'YYYY-MM') AS miesiac,
    COUNT(*) AS liczba_transakcji,
    SUM(cena_sprzedazy) AS suma_transakcji
FROM Transakcje
GROUP BY TO_CHAR(data_sprzedazy, 'YYYY-MM')
ORDER BY miesiac;

CREATE OR REPLACE VIEW nieruchomosci_niesprzedane AS
SELECT n.*
FROM Nieruchomosci n
LEFT JOIN Transakcje t ON n.id_nieruchomosci = t.id_nieruchomosci
WHERE t.id_transakcji IS NULL;

CREATE OR REPLACE VIEW ostatnia_transakcja_klienta AS
SELECT *
FROM (
    SELECT
        t.*,
        ROW_NUMBER() OVER (PARTITION BY id_klienta ORDER BY data_sprzedazy DESC) AS rn
    FROM Transakcje t
) WHERE rn = 1;

CREATE OR REPLACE PROCEDURE sprawdzanie_peselu(p_pesel IN VARCHAR2) AS
    v_poprawny NUMBER;
    v_opis_logu VARCHAR2(400);
    v_blad_logu VARCHAR2(400);
BEGIN
    IF sprawdz_pesel(p_pesel) THEN
        v_poprawny := 1;
    ELSE
        v_poprawny := 0;
    END IF;

    IF v_poprawny = 1 THEN
        v_opis_logu := 'Poprawny PESEL: ' || p_pesel;
    ELSE
        v_opis_logu := 'Błędny PESEL: ' || p_pesel;
    END IF;

    INSERT INTO Logi_operacji (data_operacji, opis)
    VALUES (SYSDATE, v_opis_logu);

    DBMS_OUTPUT.PUT_LINE(v_opis_logu);

EXCEPTION
    WHEN OTHERS THEN
        v_blad_logu := 'Błąd w procedurze sprawdzanie_peselu: ' || SQLERRM;
        INSERT INTO Logi_operacji (data_operacji, opis)
        VALUES (SYSDATE, v_blad_logu);
        RAISE;
END;
/
