-- Zadanie 1 - Ranking pracowników wg pensji

SELECT employee_id, first_name, last_name, salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;


-- Zadanie 2 - Dodanie kolumny z całkowitą sumą pensji

SELECT employee_id, first_name, last_name, salary,
       SUM(salary) OVER () AS total_salary
FROM employees;


-- Zadanie 3 - Skumolowane wartości sprzedaży i rankingu pracowniczego

SELECT e.last_name, p.product_name,
       SUM(s.price * s.quantity) AS employee_total_sales,
       RANK() OVER (ORDER BY SUM(s.price * s.quantity) DESC) AS sales_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id
GROUP BY e.last_name, p.product_name;


-- Zadanie 4 - Szczegóły sprzedaży z poprzednią i następną ceną

SELECT e.last_name, p.product_name, s.price,
       COUNT(*) OVER (PARTITION BY s.product_id, s.sale_date) AS transactions_count,
       SUM(s.price * s.quantity) OVER (PARTITION BY s.product_id, s.sale_date) AS total_paid,
       LAG(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS previous_price,
       LEAD(s.price) OVER (PARTITION BY s.product_id ORDER BY s.sale_date) AS next_price
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;


-- Zadanie 5 - Wypisanie danych z polecenia

SELECT p.product_name, s.price,
       SUM(s.price * s.quantity) OVER (PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM')) AS monthly_sum,
       SUM(s.price * s.quantity) OVER (PARTITION BY p.product_id, TO_CHAR(s.sale_date, 'YYYY-MM') ORDER BY s.sale_date) AS monthly_running_sum
FROM sales s
JOIN products p ON s.product_id = p.product_id;


-- Zadanie 6 - Porównanie ceny produktu 2022 vs 2023

SELECT p.product_name, c.category_name,
       s2022.price AS price_2022,
       s2023.price AS price_2023,
       s2023.price - s2022.price AS price_difference
FROM products p
JOIN categories c ON p.category_id = c.category_id
JOIN sales s2022 ON s2022.product_id = p.product_id AND EXTRACT(YEAR FROM s2022.sale_date) = 2022
JOIN sales s2023 ON s2023.product_id = p.product_id AND EXTRACT(YEAR FROM s2023.sale_date) = 2023
                 AND TO_CHAR(s2022.sale_date, 'MM-DD') = TO_CHAR(s2023.sale_date, 'MM-DD');


-- Zadanie 7 - Min, max, różnica cen produktów w kategoriach

SELECT c.category_name, p.product_name, s.price,
       MIN(s.price) OVER (PARTITION BY c.category_id) AS min_price,
       MAX(s.price) OVER (PARTITION BY c.category_id) AS max_price,
       MAX(s.price) OVER (PARTITION BY c.category_id) - MIN(s.price) OVER (PARTITION BY c.category_id) AS price_diff
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id;

-- Zadanie 8 - Średnia krocząca z cen produktów

SELECT p.product_name, s.sale_date, s.price,
       ROUND(AVG(s.price) OVER (
           PARTITION BY s.product_id
           ORDER BY s.sale_date
           ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING
       ), 2) AS moving_avg_price
FROM sales s
JOIN products p ON s.product_id = p.product_id;

-- Zadanie 9 - Ranking, numeracja i ranking gęsty

SELECT c.category_name, p.product_name, s.price,
       RANK() OVER (PARTITION BY c.category_id ORDER BY s.price DESC) AS price_rank,
       ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY s.price DESC) AS row_number,
       DENSE_RANK() OVER (PARTITION BY c.category_id ORDER BY s.price DESC) AS dense_rank
FROM sales s
JOIN products p ON s.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id;

-- Zadanie 10 - Wartość rosnąca sprzedaży i ranking globalny

SELECT e.last_name, p.product_name,
       SUM(s.price * s.quantity) OVER (PARTITION BY s.employee_id ORDER BY s.sale_date) AS cumulative_sales,
       RANK() OVER (ORDER BY s.price * s.quantity DESC) AS global_sales_rank
FROM sales s
JOIN employees e ON s.employee_id = e.employee_id
JOIN products p ON s.product_id = p.product_id;

-- Zadanie 11 - Pracownicy biorący udział w sprzedaży

SELECT DISTINCT e.first_name, e.last_name, e.job_id
FROM employees e
JOIN sales s ON e.employee_id = s.employee_id;
